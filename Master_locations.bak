#define IN_LOCATION_Z1 4
#define IN_LOCATION_Z2 5
int testi = 0;
void getLocations() {

   /*  testi++;
     string buf1 = "";
     string buf2 = "";

     Wait(50);
     ReceiveRemoteString(IN_LOCATION_Z1, true, buf1);
     Wait(100);

     if ( StrLen(buf1) > 4 ) {
         loc1 = buf1;
     }
     
     ReceiveRemoteString(IN_LOCATION_Z2, true, buf2);
     Wait(100);

     if ( StrLen(buf2) > 4 ) {
          loc2 = buf2;
     }
     
     ClearLine(LCD_LINE2);
     ClearLine(LCD_LINE3);
     ClearLine(LCD_LINE6);

     TextOut(0, LCD_LINE2, "L1: " + loc1 + " " + NumToStr(testi) );
     TextOut(0, LCD_LINE3, "L2: " + loc2);
     
     TextOut(0, LCD_LINE6, "B: " + buf1 + " " + buf2);
     
     locations = loc1 + loc2;


    */
}

////////////////////////////////////////
// FORMAT ZERG POSITIINS
////////////////////////////////////////
void FormatLocations() {
     //Initializing the positions of Zerg1, Zerg2 and master
     ArrayInit(Z1_location.coordinates, 0 , 2);
     ArrayInit(Z2_location.coordinates, 0 , 2);
     ArrayInit(M_location.coordinates, 0, 2);
     Z1_location.heading = 0;
     Z2_location.heading = 0;
     M_location.heading = 0;

}


 /*
task pollZergs() {

     
     string buf1;
     string buf2;
     string combination;
     string z1, z2 = "";
     int found = 0;

     LOCATION Z1_tmp;
     LOCATION Z2_tmp;

   //  ArrayInit(Z1_tmp.coordinates,0, 2);
   //  Z1_tmp.heading = 0;

    // ArrayInit(Z2_tmp.coordinates,0, 2);
    // Z2_tmp.heading = 0;
     ClearLine(LCD_LINE1);
     ClearLine(LCD_LINE2);
     ClearLine(LCD_LINE3);
     
     while (true) {
     

           
           if ( SCAN ) {
           


             if (found == 0)
             {

               ClearLine(LCD_LINE5);
                TextOut(0, LCD_LINE4, "FOUND:" + NumToStr(found) );
               if ( found == 1 ){ GapFound(1);  }
               else if ( found == 2 ) { GapFound(2); }
               else { found = 0; }
             }
             
             Wait(230);
             ReceiveRemoteString(IN_LOCATION_Z1, true, buf1);
             Wait(230);

             if ( StrLen(buf1) > 4 ) {
                loc1 = buf1;
             }
             
             ReceiveRemoteString(IN_LOCATION_Z2, true, buf2);
             Wait(230);

             if ( StrLen(buf2) > 4 ) {
                loc2 = buf2;
             }

             TextOut(0, LCD_LINE1, "L1: " + loc1);
             TextOut(0, LCD_LINE2, "L2: " + loc2);
             combination = loc1 + loc2;
             

             TextOut(0, LCD_LINE3, combination);
             
             Wait(100);
             SendRemoteString(1, 7, combination );
             /*
             Wait(200);
             ReceiveRemoteString(IN_LOCATION_Z1, true, loc1);
             Wait(200);
             
             ClearLine(LCD_LINE1);
             TextOut(0, LCD_LINE1, loc1);

             Z1_tmp = ParseCoordinates(loc1);
             Z1_location.coordinates[0] = Z1_tmp.coordinates[0];
             Z1_location.coordinates[1] = Z1_tmp.coordinates[1];
             Z1_location.heading = Z1_tmp.heading;
             
             z1 = BuildLocationString(1);
             
             ReceiveRemoteString(IN_LOCATION_Z2, true, loc2);
             Wait(200);
             
             ClearLine(LCD_LINE2);
             TextOut(0, LCD_LINE2, loc2);
             
             
             Z2_tmp = ParseCoordinates(loc2);
             Z2_location.coordinates[0] = Z2_tmp.coordinates[0];
             Z2_location.coordinates[1] = Z2_tmp.coordinates[1];
             Z2_location.heading = Z2_tmp.heading;

             z2 = BuildLocationString(2);
             
             combination = z1 + z2;
             
             ClearLine(LCD_LINE3);
             TextOut(0, LCD_LINE3, combination);
             
             SendRemoteString(1, 7, combination );
             Wait(200);
      */
      /*
             Wait(200);
             if ( ReceiveRemoteString(IN_LOCATION_Z1, true, loc) == NO_ERR ) {


                LOCATION tmp = ParseCoordinates(loc);
                
                Z1_location.coordinates[0] = tmp.coordinates[0];
                Z1_location.coordinates[1] = tmp.coordinates[1];
                Z1_location.heading = tmp.heading;
                
                z1 = BuildLocationString(1);
                ClearLine(LCD_LINE2);
                TextOut(0, LCD_LINE2, z1);
                
                Wait(200);
                SendRemoteString(1, 7, z1 );
                Wait(100);
                
              }
              
              Wait(200);
              if ( ReceiveRemoteString(IN_LOCATION_Z2, true, loc) == NO_ERR ) {


                 LOCATION tmp = ParseCoordinates(loc);

                 Z2_location.coordinates[0] = tmp.coordinates[0];
                 Z2_location.coordinates[1] = tmp.coordinates[1];
                 Z2_location.heading = tmp.heading;

                 z2 = BuildLocationString(2);

                 ClearLine(LCD_LINE3);
                 TextOut(0, LCD_LINE3, z2);
                 
                 Wait(200);
                 SendRemoteString(1, 7, z2 );
                 Wait(100);

              }
              
              
           }

     }
}

 */
///////////////////////////////////////
// LOCATION PARSER
///////////////////////////////////////
/**************************************
* This function is for parsing the coordinates from
* the string that ZERGs send.
*
* The coordinates are in form of xcoordinate_ycoordinate_heading_.
* Function parses the coordinates between the underscores,
* constructs a LOCATION -structure from them and
* returns the structure.
*/

/*
//inline LOCATION ParseCoordinates(string location) {
LOCATION ParseCoordinates(string location) {
       // A temporary struct for the coordinates
       LOCATION temp;
       // Initialization
       ArrayInit(temp.coordinates, 0, 2);
       temp.heading = 0;

       int i = 0; // For the for-loop index
       int counter = 0; // To keep track of the underscores

       int underscores[3]; // Underscore positions
       ArrayInit(underscores,0,3); // Init

       for (; i < StrLen( location ); i++ ) {    // Going through the string
          if ( StrIndex(location, i) == 0x5F ) { // If the byte in current string index is 0x5F (ascii for '_')
             underscores[counter] = i;           // mark up the underscore position
             counter++;                          // On we go

          }
          if ( counter == 3 ) break;     // If three underscores has been found, break out of the loop

       }

       // Parsing the substrings between the underscores
       // x coordinate is between position 0 and underscore one
       // y coordinate begins from the the underscore one and ends at the next one
       // etc.. Notice that the third parameter (length) isnt counted from the beginning of the string
       // but from the offset.
       string x = SubStr(location, 0, underscores[0]);
       string y = SubStr(location, underscores[0]+1, underscores[1]-(underscores[0]+1) );
       string h = SubStr(location, underscores[1]+1, underscores[2]-(underscores[1]+1) );
       
       // Build the struct
       temp.coordinates[0] = StrToNum(x);
       temp.coordinates[1] = StrToNum(y);
       temp.heading = StrToNum(h);

       /* For debugging
       TextOut(2, LCD_LINE2, x + "  " + NumToStr(underscores[0]) );
       TextOut(2, LCD_LINE3, y + "  " + NumToStr(underscores[1]) );
       TextOut(2, LCD_LINE4, z + "  " + NumToStr(underscores[2]) );

       
       
       return temp;
}

string BuildLocationString(int who) {
      LOCATION temp;
      ArrayInit(temp.coordinates, 0, 2);
      temp.heading = 0;

       switch (who) {
              case 1: {
                   temp.coordinates[0] = Z1_location.coordinates[0];
                   temp.coordinates[1] = Z1_location.coordinates[1];
                   temp.heading = Z1_location.heading;
                   break;
              }
              case 2: {
                   temp.coordinates[0] = Z2_location.coordinates[0];
                   temp.coordinates[1] = Z2_location.coordinates[1];
                   temp.heading = Z2_location.heading;
                   break;
              }
              case 3: {
                   temp.coordinates[0] = M_location.coordinates[0];
                   temp.coordinates[1] = M_location.coordinates[1];
                   temp.heading = M_location.heading;
                   break;
              }
       }

       string loc = NumToStr(temp.coordinates[0]) + "_" + NumToStr(temp.coordinates[1]) + "_"  + NumToStr(temp.heading) + "_"  + NumToStr(who) + "_";
       

       ClearLine(LCD_LINE6);
       TextOut(0, LCD_LINE6, "S: " + loc);
       
       return loc;
}
*/

         





